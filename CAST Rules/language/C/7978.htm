<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid using the scanf() function family</title>
<link rel="StyleSheet" href="../../style.css" type="text/css">
</head>
<body>
<h4>Avoid using the scanf() function family</h4>
<hr>
<h5>Technology</h5>
<p>C Language, C++</p>
<h5>Unified Status</h5>
<p>Unified</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>No</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>6</p>
<h5>Rationale</h5>
<p>The &#39;scanf()&#39; functions can lead to buffer overflow if used improperly. They do not have bound checking capability and if the input string is longer than the buffer size, then the characters will overflow into the adjoining memory.</p>
<h5>Description</h5>
<p>This rule searches for C/C++ functions, methods, constructors, and destructors that call one of the functions of the &#39;scanf()&#39; family. These functions are: scanf(), fscanf(), sscanf(), vscanf(), vsscanf(), and vfscanf().</p>
<h5>Remediation</h5>
<p>It is possible to avoid buffer overflow by specifying a field width. In this case, you must provide a &#39;char *&#39; buffer with dynamic allocation and you need to check the field width you specify does not exceed the size of the buffer.</p>
<h5>Reference</h5>
<p>Build Security In (https://buildsecurityin.us-cert.gov/bsi/articles/knowledge/coding)</p>
<h5>Sample</h5>
<pre>
int main()
{
  char buffer[15]={0};
  printf(&quot;Enter name:&quot;);
  scanf(buffer,&quot;%s&quot;);
}
</pre>
<h5>Remediation sample</h5>
<pre>
#include &lt;stdio.h&gt;

int main()
{
  int buf_size = 25;
  char *my_buf;

  my_buf = (char *) malloc (buf_size);

  printf (&quot;Enter name&quot;);
  scanf (&quot;%20s&quot;, my_buf);
}
</pre>
<h5>Output</h5>
<p>Associated to each C/C++ function/method/constructor/destructor with violations, the Quality Rule provides: - Number of violation patterns - Bookmarks for violation patterns found in the source code: - &#39;scanf()&#39; function call</p>
<h5>Total</h5>
<p>Number of C/C++ functions, constructors, destructors, and methods</p>
<h5>Metric ID</h5>
<p>7978</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
