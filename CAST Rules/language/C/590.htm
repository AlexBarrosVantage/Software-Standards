<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid using global objects in Constructors and Destructors</title>
<link rel="StyleSheet" href="../../style.css" type="text/css">
</head>
<body>
<h4>Avoid using global objects in Constructors and Destructors</h4>
<hr>
<h5>Technology</h5>
<p>C++</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>No</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>5</p>
<h5>Rationale</h5>
<p>It is not recommended to use global objects in constructors or destructors because it is not possible to know in which order the global objects are instantiated or deleted through different C++ compilation units. Thus there is a risk when global objects are used in constructors or destructors
that the application will crash because a call is made to an object that is not yet in existence or has already been destroyed.</p>
<h5>Description</h5>
<p>This rule searches for C++ constructors and destructors using global objects. Note that constructors and destructors using global variables defined in the same compilation are not considered as violating the rule.</p>
<h5>Remediation</h5>
<p>Review the object construction/destruction logic to not use global objects at this step.</p>
<h5>Output</h5>
<p>Associated to each C++ destructor and destructor with violations, the Quality Rule provides: - The global object used - Bookmarks for violation patterns found in source code: - global object used</p>
<h5>Total</h5>
<p>Number of C++ Constructors and Destructors</p>
<h5>Metric ID</h5>
<p>590</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
