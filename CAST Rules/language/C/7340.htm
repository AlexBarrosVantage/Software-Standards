<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid Classes with Destructor not explicitly virtual whenever one of its base Class has a virtual Destructor</title>
<link rel="StyleSheet" href="../../style.css" type="text/css">
</head>
<body>
<h4>Avoid Classes with Destructor not explicitly virtual whenever one of its base Class has a virtual Destructor</h4>
<hr>
<h5>Technology</h5>
<p>C++</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>No</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>7</p>
<h5>Rationale</h5>
<p>A missing virtual keyword in front of a destructor &quot;overriding&quot; a virtual destructor will hide the polymorphic nature of the destructor from developers using the class. They may not know that at execution time other destructors in the inheritance tree will be executed. A missing
virtual keyword may also be an indication that the author of the destructor ignored the fact that it needed to be virtual and thus was not aware that the destructor requires specific attention and specific coding.</p>
<h5>Description</h5>
<p>This rule searches for derived classes which provide a destructor not explicitly declared as virtual and which inherit from a base class that provides a virtual destructor.</p>
<h5>Remediation</h5>
<p>Add the virtual keyword in the destructor declaration, checks that the destructor is implemented as expected and matches the class hierarchy design requirements, and documents the destructor for future extension of the class hierarchy and modification of the method. Alternatively, if the derived
class destructor is empty, remove it.</p>
<h5>Sample</h5>
<pre>
class Vehicle 
{
public:
    Vehicle();
    virtual ~Vehicle();
    void start();
    void stop();
    virtual void run();
protected:
    Engine* theEngine;
};

class Car : public Vehicle
{
public:
    Car();
    ~Car();           // VIOLATION
protected:
    int numberOfWheels;
};
</pre>
<h5>Remediation sample</h5>
<pre>
class Car : public Vehicle
{
public:
    Car();
    virtual ~Car();           // FIXED
protected:
    int numberOfWheels;
};
</pre>
<h5>Output</h5>
<p>Associated to each C++ class with violations, the Quality Rule provides: - Bookmarks for violation patterns found in source code: - Derived-class non-virtual destructor - Base-class virtual destructor</p>
<h5>Total</h5>
<p>Number of C++ classes</p>
<h5>Metric ID</h5>
<p>7340</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
