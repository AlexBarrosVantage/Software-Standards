<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid using &#39;delete this&#39;</title>
<link rel="StyleSheet" href="../../style.css" type="text/css">
</head>
<body>
<h4>Avoid using &#39;delete this&#39;</h4>
<hr>
<h5>Technology</h5>
<p>C++</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>No</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>8</p>
<h5>Rationale</h5>
<p>&#39;delete this&#39; leaves the current instance in a &quot;dangling&quot; state, which may lead to undefined behavior. &#39;delete this&#39; is only valid if you can guarantee that the instance members will no longer be accessed. Furthermore, &#39;delete this&#39; is only valid if you can
guarantee the object was allocated using the &#39;new&#39; operator. There are acceptable patterns of code where delete this is used. For instance, when a class is always dynamically allocated, only referenced by a manager, and unregisters itself from the manager on destruction. It is possible for
an instance of the class to &quot;commit suicide&quot; by using &#39;delete this&#39; when it discovers it is no longer needed. However this pattern and its implication are usually not well understood, and other solutions are preferred.</p>
<h5>Description</h5>
<p>This rule searches for C++ Methods/Constructors/Destructors using &#39;delete this&#39;.</p>
<h5>Remediation</h5>
<p>The simplest solution is not to use &#39;delete this&#39; at all. Objects allocated on the stack have their destructors invoked when the object goes out of scope.</p>
<h5>Reference</h5>
<p>&quot;CERT: Avoid deleting this&quot;:https://www.securecoding.cert.org/confluence/display/cplusplus/OOP05-CPP.+Avoid+deleting+this</p>
<h5>Sample</h5>
<pre>
class SomeClass 
{
public:
    void doSomething();
    void destroy();
    // ...
};

void SomeClass::destroy() 
{
    delete this;  // Dangerous!!
}

// ...

SomeClass sc;
// ...
sc.destroy(); // Undefined behavior
</pre>
<h5>Output</h5>
<p>Associated to each C++ Method with violations, the Quality Rule provides: - The number of violation patterns - Bookmarks for violation patterns found in the source code: - &#39;delete this&#39;</p>
<h5>Total</h5>
<p>Number of C++ Methods/Constructors/Destructors</p>
<h5>Metric ID</h5>
<p>8004</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
