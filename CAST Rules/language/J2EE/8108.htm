<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Close the outermost stream ASAP</title>
<link rel="StyleSheet" href="../../style.css" type="text/css">
</head>
<body>
<h4>Close the outermost stream ASAP</h4>
<hr>
<h5>Technology</h5>
<p>JEE</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>Yes</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>8</p>
<h5>Rationale</h5>
<p>A frequent issue when dealing with stream is resource leak. This mainly comes from an incorrect code that miss to close the stream in any cases. Incorrect resource management is a common source of failures in production applications, with the usual pitfalls being database connections and file
descriptors remaining opened after an exception has occurred somewhere else in the code. This leads to application servers being frequently restarted when resource exhaustion occurs, because operating systems and server applications generally have an upper-bound limit for resources.</p>
<h5>Description</h5>
<p>Reports methods that open a stream in the body and that: - doesn&#39;t close the outermost stream in a finally block. Note that the number of calls to open a stream and the methods in the finally must be the same. - or doesn&#39;t annotate this stream with @Cleanup annotation (lombok.Cleanup) -
or doesn&#39;t use the try with resource to declare the stream that must be closed The following objects are taken into account: - output streams - input streams - readers - writers - channel</p>
<h5>Remediation</h5>
<p>You can: - use the try with resource to declare the resource that must be closed (available in java 7) - or close the resource in a finally block. - or annotate this resource with @Cleanup annotation (lombok.Cleanup)</p>
<h5>Reference</h5>
<p>http://stackoverflow.com/questions/15405396/is-it-necessary-to-close-input-output-streams-created-from-a-sockets-io-streams http://www.oracle.com/technetwork/articles/java/trywithresources-401775.html</p>
<h5>Sample</h5>
<pre>
private void incorrectWriting() throws IOException {
    DataOutputStream out = new DataOutputStream(new FileOutputStream(&quot;data&quot;));
    out.writeInt(666);
    out.writeUTF(&quot;Hello&quot;);
    out.close();
} // VIOLATION
</pre>
<h5>Remediation sample</h5>
<pre>
with finally
~~~~~~~~~~~~   
private void correctWriting() throws IOException {
    DataOutputStream out = null;
    try {
        out = new DataOutputStream(new FileOutputStream(&quot;data&quot;));
        out.writeInt(666);
        out.writeUTF(&quot;Hello&quot;);
    } finally {
        if (out != null) {
            out.close(); // FIX
        }
    }        
}

with Java 7
~~~~~~~~~~~
private void writingWithARM() throws IOException {
    try (DataOutputStream out 
            = new DataOutputStream(new FileOutputStream(&quot;data&quot;))) { // FIX
        out.writeInt(666);
        out.writeUTF(&quot;Hello&quot;);
    }
}

with @Cleanup annotation
~~~~~~~~~~~~~~~~~~~~~~~~
private void writingWithCleanup() throws IOException {
    @Cleanup DataOutputStream out = new DataOutputStream(new FileOutputStream(&quot;data&quot;)); // FIX
    out.writeInt(666);
    out.writeUTF(&quot;Hello&quot;);
}
</pre>
<h5>Output</h5>
<p>This report lists all methods that do not close the outermost stream they opened It provides the following information: - method full name</p>
<h5>Total</h5>
<p>All the methods that open a stream in the body</p>
<h5>Metric ID</h5>
<p>8108</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
