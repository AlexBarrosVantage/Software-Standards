<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid using Inner Classes</title>
<link rel="StyleSheet" href="../../style.css" type="text/css">
</head>
<body>
<h4>Avoid using Inner Classes</h4>
<hr>
<h5>Technology</h5>
<p>JEE</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>No</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>1</p>
<h5>Rationale</h5>
<p>Java bytecode has no concept of inner classes, so the compiler translates inner classes into ordinary classes that can be accessed by any code in the same package. An inner class can access the fields of the enclosing outer class even if these fields are declared private and the inner class is
translated into a separate class. To allow this separate class to access the fields of the outer class, the compiler silently changes these fields&#39; scope from private to package. As a result, when inner classes are declared, they are exposed but the compiler also silently overrules the decision
to make some fields private.</p>
<h5>Description</h5>
<p>This Quality Rule retrieves all methods that use inner classes.</p>
<h5>Remediation</h5>
<p>Make the inner class a standard class.</p>
<h5>Reference</h5>
<p>Gary McGraw &amp; Ed Felten, http://www.securingjava.com/preface.html</p>
<h5>Sample</h5>
<pre>
package org.test;

public class MyOuter {

 
 public class MyInner {
 }
 private MyInner inner;
 
 public MyInner saveInner(MyInner in) {
  inner = in;
  return in;
 }
}


public class AClass extends MyOuter{
 MyOuter outer;
 
   public MyInner saveInner(MyInner in) { /* VIOLATION: reference to the inner class MyInner */
    return outer.saveInner(in);
   }
}
</pre>
<h5>Remediation sample</h5>
<pre>
public class MyInner {
}

public class MyOuter {

 private MyInner inner;
 
 public MyInner saveInner(MyInner in) {
  inner = in;
  return in;
 }
}

public class AClass extends MyOuter {
 MyOuter outer;
 
   public MyInner saveInner(MyInner in) {
    return outer.saveInner(in);
   }
}
</pre>
<h5>Output</h5>
<p>This report lists all methods using Inner Classes. It provides the following information: - Method full name - Inner class accessed</p>
<h5>Metric ID</h5>
<p>7308</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
