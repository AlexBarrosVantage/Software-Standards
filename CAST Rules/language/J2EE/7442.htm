<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid to use this within Constructor in multi-thread environment</title>
<link rel="StyleSheet" href="../../style.css" type="text/css">
</head>
<body>
<h4>Avoid to use this within Constructor in multi-thread environment</h4>
<hr>
<h5>Technology</h5>
<p>JEE</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>Yes</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>8</p>
<h5>Rationale</h5>
<p>When making a reference to &#39;this&#39; within a constructor - either directly or indirectly through inner classes - visible to another thread, the result can be unpredictable. Moreover, testing and debugging multi-threaded programs is very difficult, because of concurrency hazard that makes
difficult to reproduce the issue.</p>
<h5>Description</h5>
<p>This metric will detect all cases where this is - directly or not - referenced in a constructor. Indirect reference to this means the definition of an inner class in the constructor. It includes also the case where the constructor call the method start of a thread within a constructor (i.e. a
method that inherits from java.lang.Thread.start())</p>
<h5>Remediation</h5>
<p>In the cases where the reference to &#39;this&#39; is visible to other thread a redesign of the class must be made to avoid it.</p>
<h5>Reference</h5>
<p>http://www-128.ibm.com/developerworks/java/library/j-jtp0618.html http://java.sun.com/docs/books/tutorial/essential/concurrency/syncmeth.html</p>
<h5>Sample</h5>
<pre>
public class Unsafe {
  public static Unsafe anInstance;
  public static Set set = new HashSet();
  private Set mySet = new HashSet();
  private Thread thread;

  public Unsafe() {
    // Unsafe because anInstance is globally visible
    anInstance = this;

    // Unsafe because SomeOtherClass.anInstance is globally visible
    SomeOtherClass.anInstance = this;

    // Unsafe because SomeOtherClass might save the &quot;this&quot; reference
    // where another thread could see it
    SomeOtherClass.registerObject(this);

    // Unsafe because set is globally visible 
    set.add(this);

    // Unsafe because we are publishing a reference to mySet
    mySet.add(this);
    SomeOtherClass.someMethod(mySet);

    // Unsafe because the &quot;this&quot; object will be visible from the new
    // thread before the constructor completes
    // in any case, start() must not be called within the constructor
    thread = new MyThread(this);
    thread.start();
  }

  public Unsafe(Collection c) {
    // Unsafe because &quot;c&quot; may be visible from other threads
    c.add(this);
  }
}
</pre>
<h5>Remediation sample</h5>
<pre>
public class Safe { 

  private Object me;
  private Set set = new HashSet();
  private Thread thread;

  public Safe() { 
    // Safe because &quot;me&quot; is not visible from any other thread
    me = this;

    // Safe because &quot;set&quot; is not visible from any other thread
    set.add(this);

    // Safe because MyThread won&#39;t start until construction is complete
    // and the constructor doesn&#39;t publish the reference
    thread = new MyThread(this);
  }

  public void start() {
    thread.start();
  }

  private class MyThread(Object o) {
    private Object theObject;

    public MyThread(Object o) { 
      this.theObject = o;
    }

    ...
  }
}
</pre>
<h5>Output</h5>
<p>This report lists all constructors that involve this directly or indirectly. It provides the following information: - Method full name - the number of occurrences of this detected in the constructor</p>
<h5>Total</h5>
<p>the total procedure counts all constructors</p>
<h5>Metric ID</h5>
<p>7442</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
