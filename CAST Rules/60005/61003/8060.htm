<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>A pointer to a base Class shall only be cast to a pointer to a derived Class by means of &#39;dynamic_cast&#39;</title>
<link rel="StyleSheet" href="../../style.css" type="text/css">
</head>
<body>
<h4>A pointer to a base Class shall only be cast to a pointer to a derived Class by means of &#39;dynamic_cast&#39;</h4>
<hr>
<h5>Technology</h5>
<p>C Language, C++</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>Yes</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>9</p>
<h5>Rationale</h5>
<p>You can cast from pointer to base to pointer to derived only if the pointed-to object really is of the derived type (or a type derived from the derived type). Using a &#39;static_cast&#39; will always succeed, even when the pointed-to object is of the wrong type. Using &#39;dynamic_cast&#39;
will check the real type of this object before performing the cast and is safer to use. See also rule &quot;Casting from pointer to base Class to pointer to derived Class should be done through &#39;dynamic_cast&#39; or &#39;static_cast&#39;&quot; (id 8078). Additionally, casting from a base class
to a derived class is often a sign of base design and should usually be avoided.</p>
<h5>Description</h5>
<p>This rule searches for functions that do not use a &#39;dynamic_cast&#39; to cast a pointer to a base class to a pointer to a derived class.</p>
<h5>Remediation</h5>
<p>Use &#39;dynamic_cast&#39; to cast pointers to base class to pointer to derived class.</p>
<h5>Reference</h5>
<p>MISRA C++ &quot;C++ coding standard&quot;:http://www.gotw.ca/publications/c++cs.htm (Sutter/Alexandrescu) Item 93</p>
<h5>Sample</h5>
<pre>
class A
{
};

class B : public A
{
};

void f(A *p)
{
    B* pb = static_cast&lt;B*&gt;(p); // Violation
    // Use pb
}
</pre>
<h5>Remediation sample</h5>
<pre>
void f(A *p)
{
    B* pb = dynamic_cast&lt;B*&gt;(p);
    if (!pb)
    {
        // Not the expected type, handle the error 
    }
    else
    {
        // Use pb
    }
}
</pre>
<h5>Output</h5>
<p>Associated to each C++ method, constructor, and destructor with violations, the Quality Rule provides: - pointer incorrectly casted - Bookmarks for violation patterns found in source code: - pointer cast - source class - target class</p>
<h5>Total</h5>
<p>Number of C++ methods, constructors, and destructors</p>
<h5>Metric ID</h5>
<p>8060</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
