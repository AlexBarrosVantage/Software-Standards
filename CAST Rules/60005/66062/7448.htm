<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Always validate user input with Request variables</title>
<link rel="StyleSheet" href="../../../style.css" type="text/css">
</head>
<body>
<h4>Always validate user input with Request variables</h4>
<hr>
<h5>Technology</h5>
<p>ASP</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>Yes</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>9</p>
<h5>Rationale</h5>
<p>By directly using content of Request variables, you expose your application to data injection (SQL-Injection and so forth).</p>
<h5>Description</h5>
<p>List all locations (functions or pages when done directly into a page) where request variables are use directly without content validation (i.e. where the variable is not used as an argument of a function). NB: this can list location where the code is safe (like the content is affected to a
variable that is in turn processed to ensure that this will not break). However, this is a potential problem, as future changes in the code might use the variable before it is checked.</p>
<h5>Remediation</h5>
<p>Always use a validation function that check the data input (for example that the data does not contain &#39; etc). Assign this value to a variable (preferably using a naming convention to distinguish safe from unsafe data), and then always use that variable.</p>
<h5>Reference</h5>
<p>Hacking the Code: ASP.NET Web Application Security by Mark M. Burnett and James C. Foster ISBN:1932266658 Syngress Publishing (c) 2004</p>
<h5>Sample</h5>
<pre>
String unsafe = Request.Form[&quot;UserData&quot;];
..
.. // use unsafe

=&gt; This is unsafe to use that value directly. For example if this variable is used in a SQL-Query, it is very easy to do some SQL-Injection.
</pre>
<h5>Remediation sample</h5>
<pre>
String safe=MyFilterStringFunction(Request.Form[&quot;UserData&quot;]);

=&gt; By processing the entry in the MyFilterStringFunction you can ensure that the data will not lead to SQL-Injection or other kind of attack.
Use name convention for the variable containing the safe data to distinguish it. Always use that variable afterwards.
</pre>
<h5>Output</h5>
<p>List all locations (functions or pages) where request variables are not used as an argument of a function.</p>
<h5>Total</h5>
<p>Total number of pages and .net artifacts</p>
<h5>Metric ID</h5>
<p>7448</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
