<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Call &#39;base.Dispose()&#39; or &#39;MyBase.Finalize()&#39; in the &quot;finally&quot; block of &#39;Dispose(bool)&#39; methods</title>
<link rel="StyleSheet" href="../../style.css" type="text/css">
</head>
<body>
<h4>Call &#39;base.Dispose()&#39; or &#39;MyBase.Finalize()&#39; in the &quot;finally&quot; block of &#39;Dispose(bool)&#39; methods</h4>
<hr>
<h5>Technology</h5>
<p>.Net, C#</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>No</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>4</p>
<h5>Rationale</h5>
<p>If a type inherits from a disposable type, it must call the Dispose method of the base type from within its own Dispose method in order to make sure all allocated resources are released properly and timely. Failing to do so can provoke a resource leak that will lead to serious application
availability and stability issues.</p>
<h5>Description</h5>
<p>This quality rule checks that when implementing the MS recommended dispose pattern (defined here: http://msdn.microsoft.com/en-us/library/b1yfkh5e(VS.71).aspx ), that within the &#39;Dispose(bool)&#39; methods you have a try/finally block and that from within the finally block you have a all to
&#39;base.Dispose(bool)&#39; (C#) or to &#39;MyBase.Finalize()&#39; (VB.Net) So it lists all Dispose methods with no try/finally block or with no call to &#39;base.Dispose(bool)&#39; or &#39;MyBase.Finalize()&#39; within the finally block. This applies only for Dispose(bool) method defined in
classes which implement the IDisposable interface.</p>
<h5>Reference</h5>
<p>Resource Management in .NET by Krzysztof Cwalina Program Manager - Microsoft .NET Framework http://www.gotdotnet.com/team/libraries/whitepapers/resourcemanagement/resourcemanagement.aspx Implementing IDisposable and the Dispose Pattern Properly By Scott Dorman
http://www.codeproject.com/useritems/idisposable.asp Chris Lyon&#39;s WebLog http://blogs.msdn.com/clyon/archive/2004/09/23/233464.aspx Understanding Garbage Collection in the .NET Framework By Dipal Choksi
http://www.c-sharpcorner.com/UploadFile/DipalChoksi/UnderstandingGarbageCollectioninNETFramework11292005051110AM/UnderstandingGarbageCollectioninNETFramework.aspx</p>
<h5>Remediation sample</h5>
<pre>
protected override void Dispose(bool disposing)
   {
      if(!this.disposed)
      {
         try
         {
            if(disposing)
            {
               // Release the managed resources you added in
               // this derived class here.
               addedManaged.Dispose();         
            }
            // Release the native unmanaged resources you added
            // in this derived class here.
            CloseHandle(addedNative);
            this.disposed = true;
         }
         finally
         {
            // Call Dispose on your base class.
            base.Dispose(disposing);
         }
      }
   }
</pre>
<h5>Total</h5>
<p>The Total procedure must count only Dispose(bool) methods defined in classes which implement the IDisposable interface.</p>
<h5>Metric ID</h5>
<p>7266</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
