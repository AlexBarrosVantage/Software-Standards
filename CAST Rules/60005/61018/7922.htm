<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid usage of &#39;std::find_first_of&#39;</title>
<link rel="StyleSheet" href="../../style.css" type="text/css">
</head>
<body>
<h4>Avoid usage of &#39;std::find_first_of&#39;</h4>
<hr>
<h5>Technology</h5>
<p>C++</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>No</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>4</p>
<h5>Rationale</h5>
<p>This algorithm is designed to be used in a case where you search for a limited number of candidates in a large set of data. If N is the set of searched elements and M the scope of elements to search, the time complexity of the method is &#39;O(N*M)&#39;. If the number of candidates becomes
large, other methods exist whose complexity is &#39;O(N*log(M))&#39; or even &#39;O(N)&#39;. They use an associative container to store the list of possible candidates. If the data type can only have a very limited number of values (such as &#39;char&#39;), you can have another alternative with a
bit set describing the values you are searching for. This is what a function tailored to &#39;char&#39; might do (for instance, the C &#39;strpbrk&#39; function).</p>
<h5>Description</h5>
<p>This rule searches for C++ functions using the &#39;std::find_first_of&#39; algorithm.</p>
<h5>Remediation</h5>
<p>Depending on the situation, you can either: - Use &#39;std::find_first_of&#39; if you find yourself in the kind of situation for which it was designed - Use an ad-hoc specialization for small types, such as the one described in the reference - Use an alternative with &#39;std::set&#39; - Use an
alternative with &#39;std::unordered_set&#39; or another hash set implementation</p>
<h5>Reference</h5>
<p>&quot;Jim Xochellis: find_first_of: A performance pitfall among the STL algorithms&quot;:http://www.codeproject.com/KB/stl/find_first_of.aspx</p>
<h5>Sample</h5>
<pre>
See reference article.
</pre>
<h5>Remediation sample</h5>
<pre>
See reference article.
</pre>
<h5>Output</h5>
<p>Associated to each C++ constructor, destructor, and method with violations, the Quality Rule provides: - The number of violation patterns - Bookmarks for violation patterns found in source code: - Call to &#39;std::find_first_of&#39;</p>
<h5>Total</h5>
<p>Number of C++ constructors, destructors, and methods</p>
<h5>Metric ID</h5>
<p>7922</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
