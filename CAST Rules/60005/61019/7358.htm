<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid call to AcceptChanges in a loop</title>
<link rel="StyleSheet" href="../../style.css" type="text/css">
</head>
<body>
<h4>Avoid call to AcceptChanges in a loop</h4>
<hr>
<h5>Technology</h5>
<p>.Net, C#</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>Yes</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>8</p>
<h5>Rationale</h5>
<p>From a performance point of view, it is better to call AcceptChanges only once at the end of a loop rather than at each iteration.</p>
<h5>Description</h5>
<p>Avoid call to AcceptChanges (of DataSet, DataTable etc) in loop as this have a negative impact on performance.</p>
<h5>Remediation</h5>
<p>Move the Acceptchanges call at the end of the loop. Check that the obtained results are the same.</p>
<h5>Reference</h5>
<p>See .Net 2005 sample provided. Second loop is about 50 times quicker.</p>
<h5>Sample</h5>
<pre>
// Define a dataset with a datatable and three columns (keep default values for all) 
...
void DisplayMessage( String szAdditionalMsg, long lStart)
{
   String szMsg = szAdditionalMsg +  Convert.ToString((new System.TimeSpan(DateTime.Now.Ticks)).Ticks - (new System.TimeSpan(lStart)).Ticks);
    MessageBox.Show(szMsg, &quot;Information&quot;, MessageBoxButtons.OK, MessageBoxIcon.Information);
}

void f()
{
   DataSet1 ds1 = new DataSet1();
   int i = 0;  long lStart = 0; String szMsg = &quot;&quot;;

   lStart = DateTime.Now.Ticks;
   for (i=0; i &lt;1000; i++) {
      ds1.DataTable1.Rows.Add( new object[] { i.ToString(), i.ToString(), i.ToString() });
      ds1.AcceptChanges();
   }
   DisplayMessage(&quot;#Ticks with AcceptChanges in the loop: &quot;, lStart);

}
</pre>
<h5>Remediation sample</h5>
<pre>
// Define a dataset with a datatable and three columns (keep default values for all) 
...
void DisplayMessage( String szAdditionalMsg, long lStart)
{
   String szMsg = szAdditionalMsg +  Convert.ToString((new System.TimeSpan(DateTime.Now.Ticks)).Ticks - (new System.TimeSpan(lStart)).Ticks);
    MessageBox.Show(szMsg, &quot;Information&quot;, MessageBoxButtons.OK, MessageBoxIcon.Information);
}

void f()
{
   DataSet1 ds1 = new DataSet1();
   int i = 0;  long lStart = 0; String szMsg = &quot;&quot;;

   lStart = DateTime.Now.Ticks;
   for (i=0; i &lt;1000; i++)  {
      d12.DataTable1.Rows.Add( new object[] { i.ToString(), i.ToString(), i.ToString() });
   }
   ds1.AcceptChanges();
   DisplayMessage(&quot;#Ticks with AcceptChanges outside of the loop: &quot;, lStart);
}
</pre>
<h5>Output</h5>
<p>The metric will list all the artifacts where a call to AcceptChanges is done within a loop: NameSpace + Class + Method names.</p>
<h5>Total</h5>
<p>All .Net Artifacts doing a call to AcceptChanges</p>
<h5>Metric ID</h5>
<p>7358</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
