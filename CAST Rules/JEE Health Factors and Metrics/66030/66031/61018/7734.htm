<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid to use Log.debug() without calling Log.isDebugEnabled()</title>
<link rel="StyleSheet" href="../../../style.css" type="text/css">
</head>
<body>
<h4>Avoid to use Log.debug() without calling Log.isDebugEnabled()</h4>
<hr>
<h5>Technology</h5>
<p>JEE</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>No</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>3</p>
<h5>Rationale</h5>
<p>While disabling debug logging level in production, it still impacts performance of your application because the method invocation involves the hidden cost of parameter construction. For example: &lt;&lt; cat.debug(&quot;Entry number: &quot; + i + &quot; is &quot; + String.valueOf(entry[i]))
&gt;&gt; incurs the cost of constructing the message parameter that is converting both integer i and entry[i] to a String and concatenating intermediate strings, regardless of whether the message will be logged or not.</p>
<h5>Description</h5>
<p>Reports all methods that call: . org.apache.log4j.Category.debug and not org.apache.log4j.Category. isDebugEnabled(). Or . org.apache.commons.logging.Log.debug and not org.apache.commons.logging.Log.isDebugEnabled(). Or . Refers to java.util.logging.Logger.finest and not call
java.util.logging.Logger.isLoggable Two thresholds permit to add a list of full qualified debug methods and isDebugEnabled methods name. A debug method name in the list must have its corresponding isDebugEnabled name at the same index.</p>
<h5>Remediation</h5>
<p>Add a if condition with a call to isDebugEnabled() before calling any .debug().</p>
<h5>Reference</h5>
<p>http://www.javaworld.com/jw-11-2000/jw-1122-log4j.html http://burtbeckwith.com/blog/?cat=8</p>
<h5>Sample</h5>
<pre>
import org.apache.log4j.*;

public class MyClass {
    Category cat = Category.getInstance(MyClass.class.getName());
    String entry [];

    public static void aMethod(int i) {

        cat.debug(&quot;Entry number: &quot; + i + &quot; is &quot; + String.valueOf(entry[i])); // VIOLATION
   }
</pre>
<h5>Remediation sample</h5>
<pre>
import org.apache.log4j.*;

public class MyClass {
    Category cat = Category.getInstance(MyClass.class.getName());
    String entry [];

    public static void aMethod(int i) {

        if (cat.isDebugEnabled()) { //FIXED
            cat.debug(&quot;Entry number: &quot; + i + &quot; is &quot; + String.valueOf(entry[i])); 
        }
   }
</pre>
<h5>Output</h5>
<p>This report lists all methods that violate this rule. It provides the following information: Method Full Name, the number of call to debug() without a call to isDebugEnabled()</p>
<h5>Total</h5>
<p>the number of methods that call debug() methods (i.e: org.apache.log4j.Category.debug, org.apache.commons.logging.Log.debug and the debug method list of the threashold)</p>
<h5>Metric ID</h5>
<p>7734</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
