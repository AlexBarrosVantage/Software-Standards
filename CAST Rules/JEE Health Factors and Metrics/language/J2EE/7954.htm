<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid indirect String concatenation inside loops</title>
<link rel="StyleSheet" href="../../style.css" type="text/css">
</head>
<body>
<h4>Avoid indirect String concatenation inside loops</h4>
<hr>
<h5>Technology</h5>
<p>JEE</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>No</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>7</p>
<h5>Rationale</h5>
<p>String concatenation is not efficient because it creates a StringBuffer for each concatenation. When placed in an indirect loop, String concatenation results in the creation and garbage collection of large numbers of temporary objects. This both consumes memory and can dramatically slow the
program execution. It is recommended to create a StringBuffer before entering the loop, and append to it within the loop, thus reducing the overhead.</p>
<h5>Description</h5>
<p>All methods that call indirectly a method that uses string concatenation in loops (for, while, do while) at a depth level less than &lt;depth level&gt; will be reported. The depth level is 50.</p>
<h5>Remediation</h5>
<p>It is recommended to create a StringBuilder (if JDK &gt;= 1.5 and not in thread environment) or StringBuffer before entering the loop, and append to it within the loop, thus reducing the overhead.</p>
<h5>Reference</h5>
<p>http://www.precisejava.com/javaperf/j2se/StringAndStringBuffer.htm#Strings104</p>
<h5>Sample</h5>
<pre>
public class ConcatenationTest {

  public String concatString(String name) {
    String result = &quot;hello &quot;;
    result += name;
   return result
  }
}

public class LoopTest {
  static final int N = 18000000;
  private ConcatenationTest ct = new ConcatenationTest();
 
  public void myLoop(void) {
    String name = &quot;bob&quot;;
    for (int i = 1; i &lt;= N; i++) {
      ct.concatString(name); // VIOLATION
    }
  }
}
</pre>
<h5>Remediation sample</h5>
<pre>
public class ConcatenationTest {
  public void concatString(StringBuffer result, String name) {
    result.append(name);
  }
}

public class LoopTest {
  static final int N = 18000000;
  private ConcatenationTest ct = new ConcatenationTest();
 
  public void myLoop() {
    StringBuffer result = &quot;hello&quot;;
    String name = &quot;bob&quot;;
    for (int i = 1; i &lt;= N; i++) {
      ct.concatString(result, name); // FIXED
    }
  }
}
</pre>
<h5>Output</h5>
<p>This reports all methods that call indirectly string concatenation in loops. It provides the following information: Method full name that has the loop, the call path from the method that contains the loop to the method that does the concatenation. Note that: 1/ The the call paths may contain
different paths while only one path is a violation. For example: void concatString(String name) { String result = &quot; concat &quot;; result += name; } void g() {concatString(&quot; String &quot;);} void f() { while (myCondition) { g ();} g(); } will report both path to g() while only one is a
violation. 2/ Several paths for the same method violating the rule are identified in the Metric Detail page by a sequence ID (in the Value column), this ID is dynamically set during each snapshot and the same path can have a different sequence ID in different snapshots. (the value column), this
value can vary from a snapshot to another and is used just to distinguish the violations.</p>
<h5>Total</h5>
<p>All methods calling at least one method inside a loop</p>
<h5>Metric ID</h5>
<p>7954</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
