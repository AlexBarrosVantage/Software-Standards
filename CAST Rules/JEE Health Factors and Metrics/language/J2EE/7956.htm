<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid indirect exception handling inside loops</title>
<link rel="StyleSheet" href="../../style.css" type="text/css">
</head>
<body>
<h4>Avoid indirect exception handling inside loops</h4>
<hr>
<h5>Technology</h5>
<p>JEE</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>No</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>3</p>
<h5>Rationale</h5>
<p>Exception handling tends to be relatively costly, given the work in unwinding the stack, trying various exception handlers, and so on. You should avoid placing try/catch blocks within a method that is called in a loop as it can add up when performed many times inside a loop.</p>
<h5>Description</h5>
<p>Reports all methods which contain a try/catch block and are called within a loop (for, while, do while) at a depth level less than &lt;depth level&gt;. &lt;depth level&gt; is a parameter that can be changed at will.</p>
<h5>Remediation</h5>
<p>If possible, put the loop inside the try/catch block.</p>
<h5>Reference</h5>
<p>http://www.precisejava.com/javaperf/j2se/Exceptions.htm</p>
<h5>Sample</h5>
<pre>
public class ExceptionTest {
    static final int N = 18000000;

    public void myException(void) {
         Throwable exc = new Throwable();
         try {                                               
             throw exc;
         } catch (Throwable e) { }
    }
}

public class LoopTest {
    static final int N = 18000000;
    private ExceptionTest et = new ExceptionTest();
 
    public void myLoop(void) {
       for (int i = 1; i &lt;= N; i++) {
            et.myException(); // VIOLATION
       }
    }
}
</pre>
<h5>Remediation sample</h5>
<pre>
public class ExceptionTest {
     static final int N = 18000000;

     public void myException(void) throws Throwable {
         Throwable exc = new Throwable();
         throw exc;
    }
}

public class LoopTest {
     static final int N = 18000000;
     private ExceptionTest et = new ExceptionTest();
 
     public void myLoop(void) {
         try {                                               
             for (int i = 1; i &lt;= N; i++) {
                  et.myException(); // FIXED
             }
        } catch (Throwable e) { }
    }
}
</pre>
<h5>Output</h5>
<p>This reports all methods having a loop in which there is a call to a method that contains try/catch blocks. It provides the following information: Method full name that has the loop, the call path from the method that contains the loop to the method that does the try/catch Note that: 1/ The call
path may contain different paths while only one is an error. For example: void myException(){ try{ throw exception(); } catch(exception e){} } void g() {myException();} void f() { while (myCondition) { g ();} g(); } will report both path to g() while only one is a violation, the one that is called
in the loop. 2/ Several paths for the same method violating the rule are identified in the Metric Detail page by a sequence ID (in the Value column), this ID is dynamically set during each snapshot and the same path can have a different sequence ID in different snapshots.</p>
<h5>Total</h5>
<p>Number of methods that contain at least one loop</p>
<h5>Metric ID</h5>
<p>7956</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
