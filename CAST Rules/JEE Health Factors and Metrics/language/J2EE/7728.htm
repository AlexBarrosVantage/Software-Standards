<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid thread creation for application running on application server</title>
<link rel="StyleSheet" href="../../style.css" type="text/css">
</head>
<body>
<h4>Avoid thread creation for application running on application server</h4>
<hr>
<h5>Technology</h5>
<p>JEE</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>No</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>9</p>
<h5>Rationale</h5>
<p>One of the reasons why an application server has been created is thread management that is complex to develop. It manages multiple threads for different types of components, and in order to effectively maximize performance and resource utilization, it requires control of the threads being run on
a given machine. More often than not, threads are created when there is no time to implement a better solution. However, the consequences can be serious in terms of performance and robustness. The EJB specification prohibits applications from managing their own threads. Threads in the JVM are a
limited resource that must be allocated thoughtfully. Your applications may break or cause poor Application Server performance when the server load increases. Problems such as deadlocks and thread starvation may not appear until the application is under a heavy load. Also multithreaded modules are
complex and difficult to debug. Interactions between application-generated threads and Application Server threads are especially difficult to anticipate and analyze.</p>
<h5>Description</h5>
<p>Reports all methods that call one of the following methods: * &lt;class full name&gt;.start() where &lt;class full name&gt; inherit from java.lang.Thread * java.lang.Thread.start() or reference one of the following interfaces or an implementation of these: * java.util.concurrent.Executor *
java.util.concurrent.ExecutorService when ejb-jar.xml or web.xml are present in the application that is being analyzed.</p>
<h5>Remediation</h5>
<p>Use Message Driven Bean to send messages (through JMS) that will be consumed in parallel or implement JCA where the application server manages threads efficiently and can use thread pooling if necessary.</p>
<h5>Reference</h5>
<p>EJB specifications, http://java.sun.com/developer/technicalArticles/J2EE/connectorarch1_5/; J2EE Best Practices: Java Design Patterns, Automation, and Performance - 2002 page 439</p>
<h5>Sample</h5>
<pre>
class BasicThread implements Runnable {
        public void run() {
            [...]
        }
}

class SimpleThread extends Thread {
    public SimpleThread(String str) {
       super(str);
    }
    public void run() {
       [...]
    }
}

class ThreadLaunch {
    public static void main (String args[]) {
      Runnable runnable = new BasicThread();
        new Thread(runnable).start(); // VIOLATION
        new SimpleThread(&quot;Thread&quot;).start(); // VIOLATION
    }
}
</pre>
<h5>Output</h5>
<p>This Quality Rule reports all methods that create threads. It provides the following information: Method or Constructor Full Name</p>
<h5>Total</h5>
<p>The number of Java methods and Constructors when ejb-jar.xml or web.xml are present in the application that is being analyzed.</p>
<h5>Metric ID</h5>
<p>7728</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
