<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid Struts 2 Action Fields without Validation</title>
<link rel="StyleSheet" href="../../style.css" type="text/css">
</head>
<body>
<h4>Avoid Struts 2 Action Fields without Validation</h4>
<hr>
<h5>Technology</h5>
<p>JEE</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>Yes</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>9</p>
<h5>Rationale</h5>
<p>Input validation is required to secure an application. Moreover, the web interface is exposed to anyone. Non validating input may allow injecting arbitrary web script, HTML, SQL... Consequences can be severe, like erasing the content of a database. Only one invalidated input can be exploited by
an attacker. Note that unused fields should be constrained so that they can only be empty or undefined. If unused fields are not validated, shared business logic in an action may allow attackers to bypass the validation checks that are performed for other uses of the form.</p>
<h5>Description</h5>
<p>Reports all action classes (and parent) fields (except boolean type and final fields) that are : - not referenced directly or indirectly (i.e. the field or a call to a getter) in the validate() method when the Strut Action class implements it (inherited from
com.opensymphony.xwork2.Validateable). - not referenced in the &quot;Action class name&quot;-validation.xml or &quot;Action class name&quot;-&quot;alias&quot;-validation.xml In the case of a Struts Action with parent class: - if validation is programmatic through a validate() method, then all the
fields must be referenced directly or indirectly in the validate() method and a call to super.validate() in the Struts Action class must be made - if the validation is declarative, fields must be referenced in &quot;Parent Action class name&quot;-validation.xml or &quot;Parent Action class
name&quot;-&quot;alias&quot;-validation.xml Note that we suppose that any fields (except boolean type and final fields) of the action class must be validated even if they are always used as read-only fields by JSP pages.</p>
<h5>Remediation</h5>
<p>Validate each field of the action class referenced in the methods of the action class called by the Struts framework. You can do it either by implementing the validate() method of the com.opensymphony.xwork2.ActionSupport class (or com.opensymphony.xwork2.Validateable interface) or by updating
the &#39;Action class&#39;-validation.xml file.</p>
<h5>Reference</h5>
<p>http://www.owasp.org/index.php/2004_Updates_OWASP_Top_Ten_Project</p>
<h5>Sample</h5>
<pre>
==&gt; with the validate() method
public class Register extends ActionSupport {
  private String username;
  private String password; /* VIOLATION: the password is not referenced in the validate() method */

  public String execute(){
    User user = new User();
    user.setPassword( getPassword() );
    user.setUsername( getUsername() );
    session.put(Constants.USER, user);
    return SUCCESS;
  }

  public void validate(){ /* VIOLATION: the password is not referenced in this method */
    if ( getUsername().length() == 0 ){
      addFieldError( &quot;username&quot;, getText(&quot;username.required&quot;) );
    }
    if (getUsers().userExists(getUsername() ) ){
      addFieldError(&quot;username&quot;, getText( &quot;user.exists&quot;));
    }
  }
}

==&gt; with the validation.xml file:
public class Register extends ActionSupport {
  private String username;
  private String password; /* VIOLATION: the password is not referenced in Register-validation.xml */

  public String execute(){
    User user = new User();
    user.setPassword( getPassword() );
    user.setUsername( getUsername() );
    session.put(Constants.USER, user);
    return SUCCESS;
  }
}

Register-validation.xml
&lt;validators&gt;
  &lt;field name=&quot;username&quot;&gt;
      &lt;field-validator type=&quot;requiredstring&quot;&gt;
           &lt;message &gt;Username is required.&lt;/message&gt;
      &lt;/field-validator&gt;
      &lt;field-validator type=&quot;stringlength&quot;&gt;
         &lt;param name=&quot;maxLength&quot;&gt;8&lt;/param&gt;
         &lt;param name=&quot;minLength&quot;&gt;5&lt;/param&gt;
         &lt;message&gt;While ${username} is a nice name, a valid username must be between ${minLength} and ${maxLength} characters long. &lt;/message&gt;
     &lt;/field-validator&gt;
  &lt;/field&gt;
&lt;/validators&gt;
</pre>
<h5>Remediation sample</h5>
<pre>
public class Register extends ActionSupport {
  private String username;
  private String password;

  public String execute(){
    User user = new User();
    user.setPassword( getPassword() );
    user.setUsername( getUsername() );
    session.put(Constants.USER, user);
    return SUCCESS;
  }

  public void validate(){ /* FIXED: the password is referenced in this method */
    if ( getUsername().length() == 0 ){
      addFieldError( &quot;username&quot;, getText(&quot;username.required&quot;) );
    }

 if ( getPassword().length() == 0 ){
   addFieldError( &quot;password&quot;, getText(&quot;password.required&quot;) );
    }
 
    if (getUsers().userExists(getUsername() ) ){
      addFieldError(&quot;username&quot;, getText( &quot;user.exists&quot;));
    }
  }
}

==&gt; with the validation.xml file:
public class Register extends ActionSupport {
  private String username;
  private String password; /* FIXED: the password referenced in the Register-validation.xml file (2 times) */ 

  public String execute(){
    User user = new User();
    user.setPassword( getPassword() );
    user.setUsername( getUsername() );
    session.put(Constants.USER, user);
    return SUCCESS;
  }
}

Register-validation.xml
&lt;validators&gt;
  &lt;field name=&quot;password&quot;&gt;
      &lt;field-validator type=&quot;requiredstring&quot;&gt;
         &lt;message &gt;Password is required.&lt;/message&gt;
      &lt;/field-validator&gt;
      &lt;field-validator type=&quot;stringlength&quot;&gt;
         &lt;param name=&quot;maxLength&quot;&gt;10&lt;/param&gt;
         &lt;param name=&quot;minLength&quot;&gt;6&lt;/param&gt;
         &lt;message&gt;Your password should be 6-10 characters.&lt;/message&gt;
      &lt;/field-validator&gt;
  &lt;/field&gt;
  &lt;field name=&quot;username&quot;&gt;
      &lt;field-validator type=&quot;requiredstring&quot;&gt;
           &lt;message &gt;Username is required.&lt;/message&gt;
      &lt;/field-validator&gt;
      &lt;field-validator type=&quot;stringlength&quot;&gt;
         &lt;param name=&quot;maxLength&quot;&gt;8&lt;/param&gt;
         &lt;param name=&quot;minLength&quot;&gt;5&lt;/param&gt;
         &lt;message&gt;While ${username} is a nice name, a valid username must be between ${minLength} and ${maxLength} characters long. &lt;/message&gt;
     &lt;/field-validator&gt;
  &lt;/field&gt;
  &lt;validator type=&quot;expression&quot;&gt;
      &lt;param name=&quot;expression&quot;&gt;username != password&lt;/param&gt;
      &lt;message&gt;Username and password can&#39;t be the same.&lt;/message&gt;
  &lt;/validator&gt;
&lt;/validators&gt;
</pre>
<h5>Output</h5>
<p>Report lists all action class (and parent) fields (except boolean type) that are not validated. It provides the following information: Java action class fields</p>
<h5>Total</h5>
<p>The number of all action class (and parent) fields</p>
<h5>Metric ID</h5>
<p>8040</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
