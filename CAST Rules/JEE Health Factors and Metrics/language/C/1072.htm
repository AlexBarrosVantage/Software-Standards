<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid using memory management Functions (free/malloc/realloc)</title>
<link rel="StyleSheet" href="../../style.css" type="text/css">
</head>
<body>
<h4>Avoid using memory management Functions (free/malloc/realloc)</h4>
<hr>
<h5>Technology</h5>
<p>C Language, C++</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>No</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>5</p>
<h5>Rationale</h5>
<p>Using those functions slow down application. It might be necessary to use them however. In addition it is recommended to centralize their utilization to: - use of well-proven memory management primitives that are easier to control, test, etc., when they are grouped in a well-identified component
than when they are distributed all over the source code, - create the opportunity to build a custom memory management layer that will replace all individual small-size system &quot;malloc&quot; by individual small-size custom &quot;malloc&quot; that will rely on a centralized large-size system
&quot;malloc&quot;; this would increase performance</p>
<h5>Description</h5>
<p>This rule searches for C/C++ functions that call memory-elated functions like &quot;free&quot;, &quot;malloc&quot;, and &quot;realloc&quot;.</p>
<h5>Remediation</h5>
<p>Use a centralized memory allocation function.</p>
<h5>Sample</h5>
<pre>
#include &lt;time.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;stdlib.h&gt;

#define MY_SIZE 3000000
clock_t start, finish;
struct toto
{ int i, j; };

toto * my_array[MY_SIZE];
toto * first = NULL;

toto * MyMalloc( int i)
{
   if (0 == i )
      first = (toto *)malloc( sizeof( toto) * MY_SIZE);
   return (first+i);
}

int main(int argc, char* argv[])
{
   double duration;
   /* Standard allocation */
   start = clock();
   for (int i = 0; i&lt;MY_SIZE; i++)
   { my_array[i] = (toto *)malloc( sizeof( toto)); }
   finish = clock();
   duration = (double)(finish - start) / CLOCKS_PER_SEC;
   printf( &quot;%2.5f seconds\n&quot;, duration );

   /* Optimized allocation */
   start = clock();
   for (i = 0; i&lt;MY_SIZE; i++)
   { my_array[i] = MyMalloc( i);  }
   finish = clock();
   duration = (double)(finish - start) / CLOCKS_PER_SEC;
   printf( &quot;%2.5f seconds\n&quot;, duration );
   return 0;
}
</pre>
<h5>Remediation sample</h5>
<pre>
The output of the sample program is the following:
1.69200 seconds
0.21000 seconds
</pre>
<h5>Output</h5>
<p>Associated to each C/C++ function with violations, the Quality Rule provides: - Number of violation patterns - Bookmarks for violation patterns found in the source code: - function call</p>
<h5>Total</h5>
<p>Number of C/C++ functions</p>
<h5>Metric ID</h5>
<p>1072</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
