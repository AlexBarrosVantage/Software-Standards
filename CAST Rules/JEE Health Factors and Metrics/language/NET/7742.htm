<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid SQL injection vulnerabilities ( CWE-89 )</title>
<link rel="StyleSheet" href="../../style.css" type="text/css">
</head>
<body>
<h4>Avoid SQL injection vulnerabilities ( CWE-89 )</h4>
<hr>
<h5>Technology</h5>
<p>C#, JEE</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>Yes</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>9</p>
<h5>Rationale</h5>
<p>In web based applications, the validation of all user input is critical to avoid major security problems that would come from the Injection flaws. To avoid the creation of Injection flaws, the Open Web Application Security Project (OWASP) recommends the validation of all user input : &quot;Use a
standard input validation mechanism to validate all input data for length, type, syntax, and business rules before accepting the data to be displayed or stored. Use an &quot;accept known good&quot; validation strategy. Reject invalid input rather than attempting to sanitize potentially hostile
data. Do not forget that error messages might also include invalid data&quot; The Common Weakness Enumeration defines Improper Input Validation ( CWE-20 ) as follows : &quot;When software does not validate input properly, an attacker is able to craft the input in a form that is not expected by the
rest of the application. This will lead to parts of the system receiving unintended input, which may result in altered control flow, arbitrary control of a resource, or arbitrary code execution.&quot; This rule ensures that the appropriate input validation is coded within the same method that
called the user input call, making security checking easier for all team members.</p>
<h5>Description</h5>
<p>This metric uses CAST dataflow engine to detect a call path where input data from the user is sent to SQL database without prior validation &amp; sanitization. The list of user input methods, SQL execution method and as well as the validation method can be customized. In Java, the Set methods of
the Form Beans are automatically taken into account as input methods.</p>
<h5>Remediation</h5>
<p>Code the appropriate input validation as close as possible to the user input call.</p>
<h5>Reference</h5>
<p>CWE-89 : Failure to Preserve SQL Query Structure (aka &#39;SQL Injection&#39;) http://cwe.mitre.org/data/definitions/89.html Open Web Application Security Project (OWASP) http://www.owasp.org/index.php/Top_10_2007</p>
<h5>Output</h5>
<p>List all methods that miss calling the required input validation calls It provides the following information: - Method full name - Call stack from user input source down to the target SQL execution method.</p>
<h5>Total</h5>
<p>The number of methods calling user input methods</p>
<h5>Metric ID</h5>
<p>7742</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
