<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid types that own disposable fields and are not disposable</title>
<link rel="StyleSheet" href="../../../style.css" type="text/css">
</head>
<body>
<h4>Avoid types that own disposable fields and are not disposable</h4>
<hr>
<h5>Technology</h5>
<p>C#</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>No</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>7</p>
<h5>Rationale</h5>
<p>In an application if a class declares an IDisposable field indirectly that owns an unmanaged resource then the class should implement the IDisposable interface. When the class implements the IDisposable interface , the class dispose of unmanaged resources that it owns. If the class has an
instance field that is an IDisposable type, that indicates that the field owns an unmanaged resource. So if the class does not directly own any unmanaged resources, it should not implement a finalizer.</p>
<h5>Description</h5>
<p>This rule searches all the classes that declare an IDisposable and not implement the IDisposable interface.</p>
<h5>Remediation</h5>
<p>Try either to remove the IDisposable fields or to make the class IDisposable. In the last case, invoke in the Dispose method the Dispose method of each IDisposable field.</p>
<h5>Reference</h5>
<p>http://msdn.microsoft.com/en-us/library/ms182172.aspx</p>
<h5>Sample</h5>
<pre>
using System;
using System.IO;

namespace DesignLibrary
{
   // Violation 
   public class NoDisposeMethod
   {
      FileStream newFile;

      public NoDisposeMethod()
      {
         newFile = new FileStream(@&quot;c:\temp.txt&quot;, FileMode.Open);
      }
   }

}
</pre>
<h5>Remediation sample</h5>
<pre>
using System;
using System.IO;

namespace DesignLibrary
{
   
   public class HasDisposeMethod: IDisposable
   {
      FileStream newFile;

      public HasDisposeMethod()
      {
         newFile = new FileStream(@&quot;c:\temp.txt&quot;, FileMode.Open);
      }

      protected virtual void Dispose(bool disposing)
      {
         if (disposing)
            {
               // dispose managed resources
               newFile.Close();
            }
          // free native resources
      }

      public void Dispose()
      {
         Dispose(true);
      GC.SuppressFinalize(this);
      }
   }
}
</pre>
<h5>Output</h5>
<p>This report lists all the classes that declare an IDisposable and not implement the IDisposable interface. It provides following information: - Class name</p>
<h5>Total</h5>
<p>Number of Classes</p>
<h5>Metric ID</h5>
<p>8086</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
