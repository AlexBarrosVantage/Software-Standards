<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid base Classes without virtual Destructors</title>
<link rel="StyleSheet" href="../../../style.css" type="text/css">
</head>
<body>
<h4>Avoid base Classes without virtual Destructors</h4>
<hr>
<h5>Technology</h5>
<p>C++</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>No</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>8</p>
<h5>Rationale</h5>
<p>If an object is handled through a pointer to its base class (handled through a generic interface that is certainly a major objective in object-oriented programming), memory and stability problems occur when the object is to be deleted and when the object has been created on the heap with new. If
the pointer is to the base class, the compiler can only know to call the base-class version of the destructor during the delete. Any memory clean up or functional actions that must take place when derived classes are deleted will not take place provoking memory leaks, resource losses and stability
issues.</p>
<h5>Description</h5>
<p>This rule searches for classes that are derived in sub-classes and that do not provide a virtual destructor.</p>
<h5>Remediation</h5>
<p>Add a virtual destructor to the base class.</p>
<h5>Reference</h5>
<p>Bruce Eckel&#39;s &quot;Thinking in C++&quot; http://www.cs.huji.ac.il/labs/parallel/Docs/C++/Guide/tic0161.html Bruce Eckel&#39;s &quot;Thinking in C++&quot; http://www.cs.huji.ac.il/labs/parallel/Docs/C++/Guide/</p>
<h5>Sample</h5>
<pre>
class CParent
{
    CParent() { ... }
    ~CParent() { ... }
};

class CDerived : public CParent
{
...
};
</pre>
<h5>Remediation sample</h5>
<pre>
class CParent
{
    CParent() { ... }
    virtual ~CParent() { ... }
};

class CDerived : public CParent
{
...
};
</pre>
<h5>Output</h5>
<p>Associated to each C++ class with violations, the Quality Rule provides: - Bookmarks for violation patterns found in source code: - Class definition - Non-virtual destructor if any</p>
<h5>Total</h5>
<p>Number of C++ classes</p>
<h5>Metric ID</h5>
<p>620</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
