<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid using &#39;using namespace&#39; or &#39;using&#39; declarations in header files</title>
<link rel="StyleSheet" href="../../../style.css" type="text/css">
</head>
<body>
<h4>Avoid using &#39;using namespace&#39; or &#39;using&#39; declarations in header files</h4>
<hr>
<h5>Technology</h5>
<p>C Language, C++</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>No</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>7</p>
<h5>Rationale</h5>
<p>The &#39;using namespace&#39; directive pulls an entire namespace into not only your header, but also any client code that uses your header. This can provoke ambiguities in client code, or even select the wrong function during overload resolution. A namespace &#39;using&#39; declaration is not
as polluting, but can have strange side effects since it only captures function overload sets at the time it appears. Using &#39;using&#39; is a very valuable way to increase code brevity in implementation files (.cpp), but should be avoided in headers files.</p>
<h5>Description</h5>
<p>This rule searches for header files that contain, at namespace level, a &#39;using namespace&#39; declarative or a namespace &#39;using&#39; declaration.</p>
<h5>Remediation</h5>
<p>In header files, always explicitly qualify names from other namespaces.</p>
<h5>Reference</h5>
<p>C++ coding standard, Sutter/Alexandrescu, Item 59 (http://www.gotw.ca/publications/c++cs.htm)</p>
<h5>Sample</h5>
<pre>
// In header
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;

vector&lt;string&gt; split(string const &amp;s);
</pre>
<h5>Remediation sample</h5>
<pre>
// In header
#include &lt;string&gt;
#include &lt;vector&gt;
using namespace std;

std::vector&lt;std::string&gt; split(std::string const &amp;s);
</pre>
<h5>Output</h5>
<p>Associated to each C++ header file with violations, the Quality Rule provides: - The namespace that is referenced - Bookmarks for violation patterns found in source code: - &quot;Using namespace&quot; statement</p>
<h5>Total</h5>
<p>Number of C++ header files</p>
<h5>Metric ID</h5>
<p>8066</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
