<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid double checked locking</title>
<link rel="StyleSheet" href="../../../style.css" type="text/css">
</head>
<body>
<h4>Avoid double checked locking</h4>
<hr>
<h5>Technology</h5>
<p>JEE</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>Yes</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>9</p>
<h5>Rationale</h5>
<p>Double checked locking is a software design pattern used to reduce locking overhead when implementing lazy initialization in a multi-thread environment. This avoid to initializing a value until the first time it is accessed. This pattern is unsafe because there is no guarantee it will work on
single or multi-processor machines. Note also that even if this issue as been fixed in JSE 5.0 it doesn&#39;t provide performance optimization.</p>
<h5>Description</h5>
<p>For JSE 4.x and previous version, all methods that are not synchronized and that check a value of one of its field before using synchronized and then check this field again and then assign a value to this field will be reported.</p>
<h5>Remediation</h5>
<p>To remediate, there are two solutions depending on performance choice: 1/ synchronize the method: each call to this method will cost but the initialization will be made when needed 2/ make the field static (Initialize-On-Demand Holder Class idiom): the field will be initialized during the
initialization of the class even if not required, but each call to the method that return this field will not cost.</p>
<h5>Reference</h5>
<p>http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html http://www.artima.com/designtechniques/threadsafety.html http://www-128.ibm.com/developerworks/java/library/j-dcl.html http://www-128.ibm.com/developerworks/java/library/j-jtp03304/</p>
<h5>Sample</h5>
<pre>
class Foo { 
  private Helper helper = null;
  public Helper getHelper() {
    if (helper == null) {
      synchronized(this) {
        if (helper == null) {
          helper = new Helper();
        }    
      }    
    }    
    return helper;
  }
}
</pre>
<h5>Remediation sample</h5>
<pre>
1/ synchronized the method getHelper()
 class Foo { 
   private Helper helper = null;
   public synchronized Helper getHelper() {
     if (helper == null) 
         helper = new Helper();
     return helper;
   }
2/ declare the field as static
 class Foo { 
   private static Helper helper = new Helper();
   public Helper getHelper() {
     return helper;
   }
</pre>
<h5>Output</h5>
<p>This report lists all Methods that use double checked locking pattern. It provides the following information: Method full name</p>
<h5>Total</h5>
<p>The total will be the total of methods that are synchronized or use the synchronized keyword</p>
<h5>Metric ID</h5>
<p>7446</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
