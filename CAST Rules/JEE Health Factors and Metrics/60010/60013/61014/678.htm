<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Never throw an exception from a Destructor</title>
<link rel="StyleSheet" href="../../../style.css" type="text/css">
</head>
<body>
<h4>Never throw an exception from a Destructor</h4>
<hr>
<h5>Technology</h5>
<p>C++</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>Yes</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>9</p>
<h5>Rationale</h5>
<p>Destructors should be exception-safe. This is because a destructor will be automatically called when an exception is thrown to de-allocate all objects which are on the stack between the exception throw and catch. If a destructor ends up throwing an exception, either directly or indirectly, the
program will terminate. The bottom line here: never allow an exception of any sort to be thrown from a destructor; the alternative opens up the possibility that a buggy program simply crashes without presenting any easily identifiable source for the bug.</p>
<h5>Description</h5>
<p>This rule searches for C++ destructors that throw exceptions.</p>
<h5>Remediation</h5>
<p>Remove the throw statements from destructors, prefer calling non throwing function only from destructors. If you call a potentially throwing function from a destructor, swallow all exception it may throw by wrapping it in a &#39;try/catch&#39; clause. If the object destruction can fail and you
want to report it to the user, create a dedicated function that will be called separately before the destructor.</p>
<h5>Reference</h5>
<p>&quot;How can I handle a destructor that fails?&quot;:http://www.parashift.com/c++-faq-lite/dtors-shouldnt-throw.html</p>
<h5>Sample</h5>
<pre>
Closing a file is an operation that may fail. Therefore, the standard library provides:
- A &#39;close&#39; function, which the user can call explicitly and check the stream state afterwards,
- The destructor, which call the &#39;close&#39; function if necessary but does not allow the user to check if it succeeded or failed. If the stream is configured to throw exceptions on error, those exceptions are swallowed by the destructor.
</pre>
<h5>Output</h5>
<p>Associated to each C++ destructor with violations, the Quality Rule provides: - The number of violation patterns - Bookmarks for violation patterns found in source code: - &#39;throw&#39; statement</p>
<h5>Total</h5>
<p>Number of C++ destructors</p>
<h5>Metric ID</h5>
<p>678</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
