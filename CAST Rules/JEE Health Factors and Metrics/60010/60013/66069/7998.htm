<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid local variables that are not initialized at declaration time</title>
<link rel="StyleSheet" href="../../../style.css" type="text/css">
</head>
<body>
<h4>Avoid local variables that are not initialized at declaration time</h4>
<hr>
<h5>Technology</h5>
<p>C Language, C++</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>No</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>5</p>
<h5>Rationale</h5>
<p>Using a variable that is not initialized can lead to unexpected behavior. Some compilers may detect the use of uninitialized variables in some cases, but none can detect them all. For example the following sample remains undetected: void take_ptr(int * ptr) { printf(&quot;%lx&quot;, *ptr); }
void main() { int c; take_ptr(&amp;c); }</p>
<h5>Description</h5>
<p>This rule searches for C++ functions, methods, constructors, and destructors where at least one local variable is not initialized at declaration time. This applies to standard types (&#39;char&#39;, &#39;int&#39;, etc) and pointers of any type. This does not apply to: - classes (i.e. local
declarations like: &#39;myclass var;&#39;) as they have a constructor - structs and arrays Variables that are initialized after their declaration are considered as initialized as long as this is done before any program logic.</p>
<h5>Remediation</h5>
<p>See samples and remediation samples.</p>
<h5>Reference</h5>
<p>&quot;Black Hat Federal 2006 : Attack on uninitialized Variables&quot;:http://www.blackhat.com/presentations/bh-europe-06/bh-eu-06-Flake.pdf</p>
<h5>Sample</h5>
<pre>
// SAMPLE 1: Basic example
int main()
{
    int c; // VIOLATION
}

// SAMPLE 2: Non violations
void main()
{
     int c;
     c = 0; // is NOT considered as a violation

     double d = f(); // not a violation
}

// SAMPLE 3: Initialization in branch
// Initialization done in conditional branching or in a called method are considered as a violation.

void main()
{
     int i;
     if (...)
         i = 3; // VIOLATION
}

// SAMPLE 4: Use in function call

void f( int * p) { *p = 3; }

void g() 
{
      int i;
      f( &amp;i); // VIOLATION
}
</pre>
<h5>Remediation sample</h5>
<pre>
// SAMPLE 1: Basic example
int main()
{
 int c = 0;
}

// SAMPLE 3: Initialization in branch
// Initialization done in conditional branching or in a called method are considered as a violation.

void main()
{
     int i = 0; // REMEDIATION
     if (...)
         i = 3; 
} 

// SAMPLE 4: Use in function call
// Although this usage is safe, we cannot know it in &#39;g&#39; until we read the body of &#39;f&#39;. If the implementation of &#39;f&#39; changes, calling &#39;g&#39; may become invalid. It is safer to initialize &#39;i&#39; in &#39;g&#39;:

void f( int * p) { *p = 3; }

void g() 
{
      int i = 0; // REMEDIATION
      f( &amp;i);
}
</pre>
<h5>Output</h5>
<p>Associated to each C++ Function/Method/Constructor/Destructor with violations, the Quality Rule provides: - Number of violation patterns - Bookmarks for violation patterns found in the source code: - Uninitialized variable</p>
<h5>Total</h5>
<p>Number of C++ Functions, Methods, Constructors, and Destructors</p>
<h5>Metric ID</h5>
<p>7998</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
