<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid functions overriding virtual functions without having the &#39;virtual&#39; keyword</title>
<link rel="StyleSheet" href="../../../style.css" type="text/css">
</head>
<body>
<h4>Avoid functions overriding virtual functions without having the &#39;virtual&#39; keyword</h4>
<hr>
<h5>Technology</h5>
<p>C++</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>No</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>7</p>
<h5>Rationale</h5>
<p>Functions overriding virtual functions are always virtual, even if not explicitly declared so. A missing &#39;virtual&#39; keyword in front of a function overriding virtual functions will hide the polymorphic nature of the function from developers using the it. They may not know that at
execution time other functions in the inheritance tree run instead of the function they are reading. A missing &#39;virtual&#39; keyword may also be an indication that the author of the function ignored the fact that it needed to be virtual and thus was not aware that the function requires specific
attention and specific coding. This usually results in unexpected behavior at runtime which can range from functional bugs to memory leaks and crashes.</p>
<h5>Description</h5>
<p>This rule searches for all functions overriding virtual functions without being explicitly declared as virtual.</p>
<h5>Remediation</h5>
<p>Add the virtual keyword in the function declaration, checks that the function is implemented as expected and matches the class hierarchy design requirements and documents the function for future extension of the class hierarchy and modification of the function.</p>
<h5>Reference</h5>
<p>High Integrity C++, Rule 3.3.16</p>
<h5>Sample</h5>
<pre>
class Vehicle 
{
public:
    Vehicle();
    virtual ~Vehicle();
    void start();
    void stop();
    virtual void run();     
protected:
    Engine* theEngine;
};

class Car : public Vehicle
{
public:
    Car();
    virtual ~Car();
    void run();           // VIOLATION
protected:
    int numberOfWheels;
};
</pre>
<h5>Remediation sample</h5>
<pre>
class Car : public Vehicle
{
public:
    Car();
    virtual ~Car();
    virtual void run();
protected:
    int numberOfWheels;
};
</pre>
<h5>Output</h5>
<p>Associated to each C++ method with violations, the Quality Rule provides: - Virtual overridden method - Bookmarks for violation patterns found in the source code: - Non-virtual method - Virtual method</p>
<h5>Total</h5>
<p>Number of C++ overriding methods or virtual methods</p>
<h5>Metric ID</h5>
<p>7342</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
