<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Language" content="en">
<title>Avoid using VARIANT Structures</title>
<link rel="StyleSheet" href="../../../style.css" type="text/css">
</head>
<body>
<h4>Avoid using VARIANT Structures</h4>
<hr>
<h5>Technology</h5>
<p>C++</p>
<h5>Unified Status</h5>
<p>N/A</p>
<h5>XXL Status</h5>
<p>N/A</p>
<h5>Critical Quality Rule</h5>
<p>No</p>
<h5>Weight in Parent Tech. Criterion</h5>
<p>2</p>
<h5>Rationale</h5>
<p>Do not use VARIANT Structures. Unions provide a way to alter the type ascribed to a value without changing its representation. Using VARIANT Structures reduces type safety and is usually unnecessary.</p>
<h5>Description</h5>
<p>This rule searches for C++ code that contains VARIANT structures. Note: these structures are like &quot;struct tagVARIANT { union {&quot;.</p>
<h5>Remediation</h5>
<p>Try to create a safe abstraction using polymorphic types.</p>
<h5>Output</h5>
<p>Associated to each C++ Class/Member/Method/Constructor/Destructor/Function/Variable with violations, the Quality Rule provides: the VARIANT structure</p>
<h5>Total</h5>
<p>Number of C++ Classes, Members, Methods, Constructors, Destructors, Functions and Variables</p>
<h5>Metric ID</h5>
<p>634</p>
<hr>
<p align="right"><a href="http://www.castsoftware.com" target="_blank"><img border="0" src="../../../cast.gif" alt="CAST Website" width="174" height="21"></a></p>
</body>
</html>
